{"version":3,"sources":["Components/WelcomePage/NavBar/NavbarHome.js","assets/speedImage.png","Components/WelcomePage/HomePage/Home.js","Components/Index/IndexPage.js","Components/Dashboard/Preview.js","Components/Dashboard/Speed.js","Components/Dashboard/Dashboard.js","Components/Dashboard/getText.js","reportWebVitals.js","index.js"],"names":["NavbarHome","props","useState","open","setOpen","Navbar","className","color","light","expand","NavbarBrand","NavbarToggler","onClick","style","Collapse","isOpen","navbar","Nav","displayLogin","NavItem","history","push","Home","Row","Col","xs","md","lg","src","speedImage","height","IndexPage","console","log","text","split","map","s","i","userInput","length","backgroundColor","symbols","sec","wpm","Math","round","initialState","texts","floor","random","getText","finished","defaultOptions","loop","autoplay","animationData","rocket","rendererSettings","preserveAspectRatio","Dashboard","state","onRestart","setState","onUserInputChange","e","v","target","value","setTimer","onFinish","countCorrectSymbols","this","clearInterval","interval","replace","filter","started","setInterval","prevProps","Preview","onChange","placeholder","readOnly","Speed","paddingBottom","options","width","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ROUTING","exact","path","component","Index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab59d912.chunk.js","sourcesContent":["//Author : Jay Patel\r\nimport React, {useState} from \"react\";\r\nimport {Navbar, NavbarToggler, Collapse, Nav, NavItem, NavLink, NavbarBrand} from \"reactstrap\";\r\nimport \"./NavbarHome.css\"\r\n\r\n\r\nconst NavbarHome = props => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    return (\r\n        /* Navbar */\r\n        <Navbar className={\"container\"} color={\"transparent\"} light expand=\"md\">\r\n            <NavbarBrand>Quick Typing</NavbarBrand>\r\n            <NavbarToggler onClick={() => setOpen(!open)} style={{color: 'black'}}/>\r\n            <Collapse isOpen={open} navbar>\r\n                <Nav className=\"ml-auto\" navbar>\r\n                    {props.displayLogin && <NavItem>\r\n                        <button className={\"nav-start-button\"}\r\n                                onClick={() => props.history.push(\"/dashboard\")}>Start\r\n                        </button>\r\n                    </NavItem>\r\n                    }\r\n                </Nav>\r\n            </Collapse>\r\n        </Navbar>\r\n\r\n    )\r\n};\r\n\r\nexport default NavbarHome;","export default __webpack_public_path__ + \"static/media/speedImage.59b84c64.png\";","import React from \"react\";\r\nimport styles from \"./Home.css\"\r\nimport {Row, Col} from \"reactstrap\";\r\nimport speedImage from \"../../../assets/speedImage.png\"\r\n\r\nconst Home = props => {\r\n    return (\r\n        <div className={\"main-page container\"}>\r\n            {/* Reactstrap Row and Col */}\r\n            <Row>\r\n                 {/* Elevator Pitch - Simply About us Page and Start  */}\r\n                <Col className={\"main-left-content\"} xs={12} md={6} lg={6}>\r\n                    <span className={\"intro-line\"}>That isn't writing at <br></br>all, its</span>\r\n                    <span className={\"typing-name\"}>Typing...</span>\r\n                    <p className={\"market-line\"}>Lets go and get your hand dirty on keyboard</p>\r\n                    <button className={\"grow-with-us-button\"} onClick={() => props.history.push(\"/dashboard\")}>\r\n                        Let's Go !!!!\r\n                    </button>\r\n                </Col>\r\n                {/* Illustartive Image - Right Side Content */}\r\n                <Col className={\"main-right-content\"}>\r\n                    <img src={speedImage} height={340} className={'metrics-image'} /> \r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Home","import React, {useState} from \"react\";\r\nimport Navbar from \"../WelcomePage/NavBar/NavbarHome\"\r\nimport HomePage from \"../WelcomePage/HomePage/Home\"\r\n\r\n/* IndexPage - Will rendered diff components \r\n   Header - Navbar\r\n   Main Content - HomePage\r\n   Footer - \r\n*/\r\nconst IndexPage = props => {\r\n\r\n    console.log(props.history);\r\n    return(\r\n        <div className={\"test\"}>\r\n        <div className={\"circle-blue\"}>\r\n            <Navbar displayLogin={true} history={props.history} />\r\n            <HomePage history={props.history} />\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IndexPage","import React from 'react';\r\n\r\nexport default (props) => {\r\n\r\n    const text = props.text.split('');\r\n    \r\n    /**\r\n        * Key & Value Pair\r\n        * Comparing userInput and default text to disaply warning\r\n    */\r\n    return(\r\n        <div className=\"border rounded p-2 mb-4\">\r\n            {\r\n                text.map((s,i) => {\r\n                    let color;\r\n                    if(i < props.userInput.length){\r\n                        color = s === props.userInput[i] ? '#dfffa0' : '#fcbea4';\r\n                    }\r\n                    return <span key={i} style={{backgroundColor : color }}>{s}</span>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default (props) => {\r\n\r\nif(props.symbols !== 0 && props.sec !== 0){\r\n\r\n    /**\r\n     * Formula to count Wpm\r\n     * ex:if you typed 200 characters in 1 minute, your net wpm typing speed would be (200 characters / 5) / 1 min = 40 WPM.\r\n     */\r\n    const wpm =  (props.symbols/5) / (props.sec/60)\r\n\r\n    return(\r\n        <div>{Math.round(wpm)} wpm</div>\r\n        \r\n    )\r\n}\r\n    return null\r\n}","import React, {Component, useState} from \"react\";\r\n\r\nimport Preview from \"./Preview\";\r\nimport Speed from \"./Speed\"\r\nimport getText from \"./getText\"\r\nimport rocket from \"../../assets/rocketBro.json\";\r\nimport Lottie from \"react-lottie\";\r\nimport {Row, Col, Alert} from \"reactstrap\";\r\n\r\n//Setting Initial State - setting default props\r\nconst initialState = {\r\n    text: getText(),\r\n    userInput: '',\r\n    symbols: 0,\r\n    sec: 0,\r\n    finished: false,\r\n}\r\n\r\n// DefautOptions for RocketLiveImage - Animation\r\nconst defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: rocket,\r\n    rendererSettings: {\r\n        preserveAspectRatio: 'xMidYMid slice'\r\n    }\r\n};\r\n\r\n/**\r\n * Dashboard component description in JSDoc format. Markdown is *supported*.\r\n */\r\nclass Dashboard extends Component{\r\n    \r\n    state = initialState; \r\n\r\n    /**\r\n        * Method to Restart Game\r\n        *\r\n        * Clear The State\r\n    */\r\n    onRestart = () =>{\r\n        this.setState(initialState)\r\n    }\r\n\r\n     /**\r\n        * Get userInput Each Word - Seperated\r\n        * setTimer() - Timer start from 60 \r\n        * onFinish() - Timer finish at 0\r\n        * Checking Correct typed Word\r\n    */\r\n    onUserInputChange = (e) => {\r\n        const v = e.target.value;\r\n        this.setTimer();\r\n        this.onFinish(v);\r\n        this.setState({\r\n            userInput: v,\r\n            symbols: this.countCorrectSymbols(v)\r\n        })\r\n    }\r\n\r\n     /**\r\n        * Once user complate whole para\r\n        * Clear The state\r\n        * Finish The Game \r\n       \r\n    */\r\n    onFinish(userInput){\r\n        if(userInput === this.state.text)\r\n        {\r\n            clearInterval(this.interval)\r\n            this.setState({\r\n                finished: true\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n     /**\r\n        * Counting Correct Symobols at the same time\r\n        * Ignoring space from both sides\r\n        * Giving green and warning sign at the same time\r\n    */\r\n    countCorrectSymbols(userInput){\r\n        const text = this.state.text.replace(' ','');\r\n        return userInput.replace(' ', '').split('').filter((s,i) => s === text[i]).length\r\n    }\r\n\r\n     /**\r\n        * Setting the Timer\r\n        * Using SetTimeOut/SetInterval \r\n        * Will be increased by 1 sec (1000 ms)\r\n    */\r\n    setTimer(){\r\n        if(!this.state.started){\r\n            this.setState({started:true});\r\n            this.interval = setInterval(() => {\r\n                this.setState(prevProps => {\r\n                    return {sec: prevProps.sec + 1 }\r\n                })},1000)\r\n            \r\n        }\r\n    }\r\n    // render() method\r\n    render(){\r\n    return (\r\n        <>\r\n        <div className=\"container mt-5 mb-5\">\r\n            <Row>\r\n                 {/* Preview & input Area & Reset Button */}\r\n                <Col className={\"left-col\"} xs={12} md={12} lg={5}>\r\n                    <Preview text={this.state.text} userInput={this.state.userInput} />\r\n                     {/* Become ReadOnly once the game is over */}\r\n                    <textarea value={this.state.userInput} onChange={this.onUserInputChange} className=\"form-control mb-3\" placeholder=\"Start typing...\" readOnly={this.state.finished}>    </textarea>\r\n                    <Speed sec={this.state.sec} symbols={this.state.symbols}/>\r\n                    <div className=\"text-right\">\r\n                        <button className={\"nav-start-button\"} onClick={this.onRestart}>Restart</button>\r\n                    </div>\r\n                </Col>\r\n                 {/* Illustartive Image - Right Side Content */}\r\n                <Col lg={7} className={\"right-col\"}>\r\n                <Lottie style={{paddingBottom: \"680px\"}} options={defaultOptions}\r\n                            height={1000}\r\n                            width={700}\r\n                /> \r\n                </Col>\r\n            </Row>\r\n        </div>\r\n        </>\r\n    )}\r\n};\r\n\r\nexport default Dashboard","// Setting the deafult Random text - will disaply diff text each time \r\nexport default() => {\r\n    const texts = [\r\n        'When I was in the department there were two things I hated in this world: private investigators and psychics',\r\n\r\n        'I looked away, because he was staring at me, and I knew I was flushed, and I knew Id made a face, though',\r\n\r\n        'Finally, I have someone I can pass on my wisdom to. Let me tell you about a couple of things I learned while working at the coffee house. First of all, the customer is always right.'\r\n    ];\r\n\r\n    /**\r\n        * Math.floor - to display Random Text every time\r\n    */\r\n    return texts[Math.floor(Math.random()*texts.length)]\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Index from \"./Components/Index/IndexPage\";\nimport Dashboard from \"./Components/Dashboard/Dashboard\";\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter, Route, Redirect} from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// To use context api or Redux later on\nconst ROUTING = (\n      <BrowserRouter>\n          <div>\n              \n              <Route exact path=\"/\" component={Index} />\n              <Route exact path=\"/dashboard\" component={Dashboard}/>\n          </div>\n          \n      </BrowserRouter>\n);\nReactDOM.render(ROUTING, document.getElementById(\"root\"));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}